#!/usr/bin/env bash

set -B
# `GIT443=1 mksshconfig` to use port 443 for cloud git

ssh_has_include_feature () {
  # 7.3p1 target
  command -V ssh 2>&1 >/dev/null || return 1

  local versionstr="$(ssh -V 2>&1 | grep OpenSSH)" || return 1

  local major="$(printf "$versionstr" | sed -ne 's:^.*OpenSSH_\([0-9]\{1,\}\).*$:\1:p' )"
  (( $major > 7 )) && return 0
  (( $major < 7 )) && return 1

  local minor="$(printf "$versionstr" | sed -ne 's:^.*OpenSSH_[0-9]*\.\([0-9]\{1,\}\).*$:\1:p' )"
  (( $minor > 3 )) && return 0
  (( $minor < 3 )) && return 1

  local patch="$(printf "$versionstr" | sed -ne 's:^.*OpenSSH_[0-9]*\.[0-9]*p\([0-9]\{1,\}\).*$:\1:p' )"
  (( $patch >= 1 )) && return 0
  return 1
}
include () {
  if (( $# < 2 )); then
    echo "fatal: assertion error, include call invalid"
    exit 1
  fi

  local CONFIG_OUT=$1
  shift

  for file in $@; do
    echo "Include $file"  >> "$CONFIG_OUT"
  done
}
catstripped () {
  if (( $# < 2 )); then
    echo "fatal: assertion error, catstripped call invalid"
    exit 1
  fi
  local CONFIG_OUT=$1
  shift

  # remove comments and blank lines
  if sed -r 2>/dev/null; then
    cat $@ | sed -e '/^\s*#$/d' -e '/^\s*$/p' >> "$CONFIG_OUT"
  else
    cat $@  >> "$CONFIG_OUT"
  fi
}
is_vmware () {
  command -V lspci 2>/dev/null || return 1
  lspci | grep VMware 2>/dev/null >&2
}
mksshconfig () {
  local pfx="$HOME/.ssh"
  local CONFIG_OUT="$pfx/config"
  local configd="$pfx/config.d"
  local socketsd="$pfx/sockets"

  local git_ext='std'
  if [ -n "${GIT443}" ]; then
    echo "Using alternative port 443 for cloud git"
    git_ext='alt'
  fi

  rm -vf ${CONFIG_OUT}{,.sig}

  local cmd='catstripped'
  if ssh_has_include_feature; then
    cmd='include'
  fi

  >>"${CONFIG_OUT}" cat <<-__EOF
################################################################################
# Auto Generated on `date -u` by `whoami`
################################################################################
__EOF

  if is_vmware; then
    include "$CONFIG_OUT" $configd/0-vmware
  fi

  include "$CONFIG_OUT" ${configd}/0-git.${git_ext}

  include "$CONFIG_OUT" "`find "$configd" \! -type d | grep -v './0-'`"

  cat "$CONFIG_OUT"
  set -x
  mkdir -p ~/.ssh/sockets
  chmod 0600 $pfx/config{,.sig,.d/*}
  chmod 0700 $pfx
  set +x

  # echo "Sign it?"
  # read respy
  # if  [ "$respy" = "y" ]; then
  #   gpg2 --detach-sign "${CONFIG_OUT}"
  # fi
}
mksshconfig $@
