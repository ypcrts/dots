"{{{1 Plugins Meta
let g:configdir = '~/.vim'
if has('win32')
  let g:configdir = '~/vimfiles'
endif
let g:libdir = expand(g:configdir)
if has('nvim')
  let g:configdir = '~/.config/nvim'
else
  set nocompatible
endif

function! Sourceiffr(target)
  if filereadable(glob(a:target))
    execute 'source ' . a:target
  endif
endfunc

"{{{2 Pathogen.vim
call Sourceiffr(g:libdir . '/managedbootstrap/pathogen.vim')
call pathogen#infect(g:libdir . '/pathogens/{}')

"{{{2 Plug.vim
let mapleader="\<Space>"
if empty($SAFEVI) && $USER != 'root'
  call Sourceiffr(g:libdir . '/managedbootstrap/plug.vim')
  call Sourceiffr(g:libdir . '/plugins.vim')
else
  let g:safevi = 1
  echo 'NO PLUGINS LOADED'
endif 


"{{{1 Standard Base Configuration (syntax, utf8, ft, clipboard, 256 )
"
"{{{2 Clear Autocommands
if has('autocmd')
  autocmd!
endif
"
"{{{2 No Magic File I/O
set nobackup
set writebackup
set noswapfile
set noautowrite
set noautowriteall
set noautoread

"{{{2 Syntax highlighting, filetype plugin, indent
filetype plugin on
filetype indent on
syntax on
syntax sync minlines=256

"{{{2 File encoding
if has('multi_byte')
  set encoding=utf-8 " UTF-8 encoding for all new files
  set nobomb
endif
set ffs=unix,dos,mac " Try recognizing dos, unix, and mac line endings.

"{{{2 Neovim-obseleted options
if !has('nvim')
  set ttyfast               " More redrawing characters sent to terminal
  set ttymouse=xterm2       " More accurate mouse tracking
endif

"{{{1 8-bit and 24-bit color support
if &t_Co > 2 || has('gui_running')
  if has('termguicolors') &&
        \ (  matchstr(system("uname"), "Darwin") != ''
        \ || matchstr($TERM, 'rxvt.*') == ''  )
    " This nonsense can only be set if terminal has 24 bit colour support.
    " neovim does not intuit such a thing. programming is math not magic.
    " rxvt never has 24-bit support, so off.
    set termguicolors
  endif

  set hlsearch
endif


"{{{1 undo & cache
set undolevels=2048
let s:cachedir=expand($XDG_CACHE_HOME . '/vim')
let s:undocachedir=s:cachedir . '/undo'
if !isdirectory(s:undocachedir)
  call mkdir(s:undocachedir, 'p', 0700)
endif
if isdirectory(s:undocachedir)
  let g:netrw_home=s:cachedir
  let &directory=s:cachedir . '/swaps'
  if has('persistent_undo')
    set undofile
    let &undodir=s:undocachedir
  endif
endif

"{{{1 disable viminfo/ShaDa files
if has('nvim') "
  set shada="NONE"
else
  set viminfo="NONE"
endif

"{{{1 font, cursor, emenu
if has('gui_running')
  if has("gui_win32") " true on WOW64
      set guicursor+=a:blinkon0 " disable blinking cursor (gvimwin32)
      let &guifont="Consolas:h10"
  else
      let &guifont="Terminus\ 10"
  endif
  " [+c text dialogues instead of popups]
  " http://vimdoc.sourceforge.net/htmldoc/options.html#%27guioptions%27
  set guioptions=aceg
  " (m)enubar scrollba(r) (T)(t)oolbar
  " set guioptions-=mrTt

else
    source $VIMRUNTIME/menu.vim
    map <Leader>em :emenu <C-z>
endif

if has("win32")
 colorscheme ir_black
elseif exists('g:safevi')
  color elflord
elseif has('termguicolors') && &termguicolors
  " macos
  let g:solarized_termtrans = 1
 set background=dark
 color solarized8_dark_high
else
  " rice
  augroup TransparentBackground
    au ColorScheme * hi Normal guibg=NONE ctermbg=NONE
  augroup END
  color basic-dark
endif

"{{{1 Code format & Indenting
set autoindent
set nosmartindent
set nocindent
set expandtab
set shiftround
set tabstop=2
set shiftwidth=2
set softtabstop=2

set showcmd      " show typing in normal mode
set showbreak=…\ \ \ " show x in front of wrapped lines (trailing escaped space `\ `)
set textwidth=0  " disable hard wrap at col 79

set formatoptions=qn1jtc

set linebreak        " wrap lines at chars in &breakat'
set nowrap

set history=1000
set synmaxcol=1024

"{{{1 Interaction (Keys, Mouse).

set backspace=2           " =2: full backspacing capabilities (indent,eol,start)
set nojoinspaces          " never joing lines with two spaces

set mouse=                " set mouse=nv " enable mouse in normal, visual
set mousehide             " Hide the mouse when typing text
set nostartofline         " Avoid moving cursor to BOL when jumping around

set whichwrap=b,s,h,l,<,> " <BS> <Space> h l <Left> <Right> can change lines
set virtualedit+=block    " Let cursor move past the last char in <C-v> mode
"set scrolloff=3           " Keep 3 context lines above and below the cursor

set matchpairs=(:),{:},[:],<:>
set noshowmatch           " Don't Briefly jump to a paren once it's balanced
set matchtime=2           " (for only .2 seconds).

set complete=.,w,b,u,t
set completeopt=longest,menuone ",preview

if has("autocmd")
  " Resize splits with window
  au VimResized * :wincmd =

  " Restore cursor position
  au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

  augroup reload_vimrc
    au!
    autocmd bufwritepost $MYVIMRC nested source $MYVIMRC
  augroup END
endif

set tags=./tags,tags,.tags


"{{{2 Key map/sequence timeout
set timeoutlen=900
set ttimeoutlen=0

"{{{1 Visuals
set title              " show title in console title bar
set noruler            " no: display row, column and % of document
set laststatus=2
set noshowmode         " hide secondary statusline
set noerrorbells
set novisualbell
set nonumber
set shortmess=aoOstTAI " shorten all messages except written
set report=0           " Always report the number of lines changed by a cmd

set splitright
set splitbelow

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

"{{{2 Cursor Column
set nocursorline
set nocursorcolumn
" augroup activecursor
  " autocmd!
  " autocmd winenter * set cursorline
  " autocmd winleave * set nocursorline
  " autocmd winenter * set cursorcolumn   | set cursorline
  " autocmd winleave * set nocursorcolumn | set nocursorline
" augroup end

"{{{2  Wildmenu
if has('wildmenu')
 " enhanced tab-completion shows all matching cmds in a popup menu
 set wildmenu
 set wildmode=full
 set wildcharm=<C-z>

 if has('wildignore')
   set wildignore+=*.a,*.o,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,.DS_Store,.git,.hg,.svn,*~,*.swp,*.tmp
 endif

  if exists('&wildignorecase')
    set wildignorecase
  endif
endif
"
"{{{2 Listchars: show spaces, tab, eol trailing
set nolist
set listchars=trail:·,precedes:…,extends:→,tab:▸\ ,eol:$
set fillchars=fold:\ ,diff:╳,vert:│

"{{{2 Folding
fu! CustomFoldText()
  " I am from http://www.gregsexton.org/2011/03/improving-the-text-displayed-in-a-fold/

  "get first non-blank line
  let fs = v:foldstart
  while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " " . foldSize . " lines "
  let foldLevelStr = repeat("+--", v:foldlevel)
  let lineCount = line("$")
  let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
  let expansionString = repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
  return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endf
set foldtext=CustomFoldText()
set foldmethod=marker
set foldlevelstart=99
set foldminlines=0

"{{{2 Searching
set incsearch  " increment search
set ignorecase " case-insensitive search
set smartcase  " uppercase causes case-sensitive search
set nogdefault " Disabled - See http://j.mp/1mZvnrt  (no `g` on `:s`)

"{{{2 Filetype Autocommands
if has("autocmd")
  au FileType helpfile setlocal nonumber
  au FileType mail,tex setlocal textwidth=72
  au FileType cpp,c,java,sh,pl,php,asp setlocal autoindent cindent
  au FileType c,cpp,java setlocal foldmethod=syntax foldnestmax=5
  au FileType es6,javascript setlocal foldmethod=syntax
  au FileType crontab set nobackup nowritebackup
  au BufNewFile,BufRead  modprobe.conf setlocal syntax=modconf
  au BufNewFile,BufRead .tern-project set ft=json
  au BufNewFile,BufRead .eslintrc set ft=json
endif

"{{{1 Keybindings.
"{{{2 Basic functionality extension
vnoremap > >gv
vnoremap < <gv
nnoremap gls :ls<CR>
nnoremap gb :bn<CR>
nnoremap gB :bp<CR>
nnoremap Y y$

" Center the cursor on the search word when using 'n'
" http://git.z3bra.org/cgit.cgi/dotfiles/tree/vimrc
nmap n nzz
nmap N Nzz

" Q formats paragraphs, instead of entering ex mode
noremap Q gq
nnoremap <silent> gqJ :call Exe#ExeWithOpts('norm! gqj', { 'tw' : 2147483647 })<CR>

" K should behave like J
nnoremap K kJ

nnoremap <buffer> <Left> <Nop>
nnoremap <buffer> <Right> <Nop>
nnoremap <buffer> <Up> <Nop>
nnoremap <buffer> <Down> <Nop>

inoremap <buffer> <Left> <Esc>
inoremap <buffer> <Right> <Esc>
inoremap <buffer> <Up> <Esc>
inoremap <buffer> <Down> <Esc>

vnoremap <buffer> <Left> <Nop>
vnoremap <buffer> <Right> <Nop>
vnoremap <buffer> <Up> <Nop>
vnoremap <buffer> <Down> <Nop>

"{{{2 splits, tmux aware.
" pieced together from:
" https://github.com/christoomey/vim-tmux-navigator
" http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits
if exists('$TMUX')
  let g:tmux_is_last_pane = 0
  au WinEnter * let g:tmux_is_last_pane = 0
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  function! TmuxOrSplitPrevious()
    let nr = winnr()
    if !g:tmux_is_last_pane
      silent! execute 'wincmd p'
    endif
    if g:tmux_is_last_pane || nr == winnr()
      silent call system('tmux select-pane -l')
      let g:tmux_is_last_pane = 1
    else
      let g:tmux_is_last_pane = 0
    endif
  endfunction

  map <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  map <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  map <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  map <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
  map <silent> <C-\> :call TmuxOrSplitPrevious()<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif

" insert mode <C-k> inserts digraphs etc
inoremap <C-k> <C-k>

"}}}
"{{{2 Timestamps, datestamps

if exists("*strftime")
  " Local datestamp
  noremap <silent> <leader>zl m'A<C-R>=strftime("%d.%m.%Y")<CR><ESC>``

  if has('win_32')
    " To hell with it... local weak datestamps for Windows
    " Unless for some unholy reason there's no strftime compiled in vim
    " ... then the environment is garbage, so who cares about timestamps.
    map <silent> <leader>zs <leader>zl
    map <silent> <leader>zd <leader>zl
  else
    " Real timestamps, yes. Praise GNU... and Darwin?
    noremap <silent> <Leader>zs m'A<C-R>=system('date -u \+\%Y\%m\%dT\%H\%MZ')<CR><ESC>``
    noremap <silent> <Leader>zd m'A<C-R>=system('date -u \+\%Y-\%m-\%d')<CR><ESC>``
  endif
endif

" Timestamped signatures
nmap <silent> <leader>zg A<C-R>=' [ypcrts // '<CR><ESC><leader>zs<ESC>A<C-R>=']'<CR><ESC>
nmap <silent> <Leader>zz A<C-R>=' ['.expand("$USER").' // '<CR><ESC><leader>zs<ESC>A<C-R>=']'<CR><ESC>

"{{{2 Leader

nnoremap <Leader>rc :tabnew $MYVIMRC<CR>

" visual <Leader>d to black hole register
vmap <silent> <leader>d "_d

nnoremap <leader>dgr :diffget REMOTE<CR>
nnoremap <leader>dgb :diffget BASE<CR>
nnoremap <leader>dgl :diffget LOCAL<CR>

nnoremap <leader>8 :%!autopep8 -a -a -a -<CR>
vnoremap <leader>8 :!autopep8 -a -a -a -<CR>
nmap <silent> <leader>cp :Pydocstring<CR>

noremap <silent> <Leader><Leader> :nohls<cr><c-l>
nnoremap <Leader>ml :call ModelineStub()<CR>
nnoremap <Leader>dts :call DeleteTrailingSpaces()<CR>

"{{{1  Local config overrides
call Sourceiffr(g:configdir . ' /local.vim')

