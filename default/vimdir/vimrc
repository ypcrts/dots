" vi: sw=2:sts=2:ts=2:et:fdm=marker:nomodeline:
"{{{1 Meta
set nocompatible
set shortmess=aIT
set report=0           " Always report the number of lines changed by a cmd

let mapleader = "\<Space>"

let s:is_windows = has('win32') || has('win64')
let s:is_darwin = has('mac')
let s:is_nvim = has('nvim')
let s:is_vim800 = v:version >= 800

let s:vimfilesdir = s:is_windows ? '~\vimfiles' : '~/.vim'
let s:vimrcdir = fnamemodify($MYVIMRC, ":h")
exe "set rtp=" . fnameescape($VIMRUNTIME) . ',' . s:vimfilesdir

if s:is_nvim
  if s:is_windows
    " XXX: python may be python2, because yes life still requires py2 post EOL
    " XXX: `python3` will be the Windows Store shortcut, so try py.exe
    let s:pyprogpath = system(
      \ 'powershell "@(\"py\", \"py3\", \"python3\", \"python\")|foreach {  if ($ret=command -ErrorAction SilentlyContinue $_) { echo $ret.Source; break; }  }'
      \ )
    let g:python3_host_prog = substitute(s:pyprogpath, '[\r\n]\+', '', '')
  else
    let s:pydir = fnamemodify('~/.virtualenvs/3/bin/', ':p')
    if isdirectory(s:pydir)
      let g:python3_host_prog = s:pydir . "python"
    else
      echoerr "python3_host_prog unset - dir not found: " . s:pydir
    endif
  endif
endif

"{{{2 Plugins
if ($USER == 'root' || $USER == 'admin' || $USER == 'adm')
    \ && empty($NOSAFEVI) || !empty($SAFEVI)
  echomsg '[SAFEVI] enabled' . (empty($SAFEVI) ? ', welcome ' . $USER : ' manually')
  let s:safevi = 1
else
  if !empty($NOSAFEVI)
    echoerr '[SAFEVI] disabled as ' . $USER
    exit
  endif
  exe "source " . rcz#VimFileRealpath('plugins.vimrc')
endif

"{{{1 Standard Base Configuration (syntax, utf8, ft, clipboard, 256 )

"{{{2 Clear Autocommands
autocmd!

"{{{2 Danger: Magic File I/O
set nobackup
set writebackup
set noswapfile
set noautowrite
set autoread
set nohidden    "nohidden abandons unattached buffers

"{{{2 Syntax highlighting, filetype plugin, indent
filetype plugin indent on
syntax on
syntax sync minlines=256
set synmaxcol=4096
 " defaults to rtp[0] -_-
let &spellfile = expand(s:vimfilesdir . '/spell/en.utf-8.add')

"{{{2 File encoding
if has('multi_byte')
  set encoding=utf-8 " UTF-8 encoding for all new files
  set nobomb
endif
set ffs=unix,dos,mac " Try recognizing dos, unix, and mac line endings.

"{{{2 Neovim-obseleted options
if ! s:is_nvim
  set ttyfast               " More redrawing characters sent to terminal
  set ttymouse=xterm2       " More accurate mouse tracking
endif

"{{{1 4-bit, 8-bit and 24-bit color support
if &t_Co > 2 || has('gui_running')
  set hlsearch
endif

if has('termguicolors') && !s:is_windows
  " vim8 has termguicolors too
  if s:is_nvim && (
        \    match($TERM, '^\v(screen|rxvt)-256.*$') == 0
        \   || !empty($ITERM_SESSION_ID)
        \   || !empty($ALACRITTY_LOG)
        \ )
    " This nonsense can only be set if terminal has 24 bit colour support.
    " neovim does not intuit such a thing. programming is math not magic.
    " rxvt never has 24-bit support, so off.

    set termguicolors

    " STILL BROKEN IN VIM800/TMUX2.6 - github issues galore
    " XXX: When unbroken should remove has('nvim') from conditional

    " " vim8, tmux-2.5, iterm3: b&w so force it off
    " if v:version >= 800
    "   " see `:help term.txt`
    "   let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
    "   let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
    " endif
  else
    set notermguicolors
  endif
endif


"{{{1 undo & cache
set undolevels=2048
set undoreload=20000
let s:cachedir='/tmp/vim-cache' . $USER
if has('win32')
  let s:cachedir=s:vimrcdir . '/cache'
endif
" XXX: persistent undo
let s:undocachedir=s:cachedir . '/undo'
"let s:undocachedir=s:cachedir . '/undo'
if !isdirectory(s:undocachedir)
  call mkdir(s:undocachedir, 'p', 0700)
endif
if isdirectory(s:undocachedir)
  let g:netrw_home=s:cachedir
  let &directory=s:cachedir . '/swaps'
  if has('persistent_undo')
    set undofile
    let &undodir=s:undocachedir
  endif
endif

"{{{1 disable viminfo/ShaDa files
" if has('nvim') "
"   set shada="NONE"
" else
"   set viminfo="NONE"
" endif

if (s:is_windows && !s:is_nvim && v:version < 700 ) || exists('s:safevi')
 colorscheme ir_black
" elseif has('termguicolors') && &termguicolors
"   set background=dark
"   let g:solarized_termtrans = 1
"   color solarized8_dark_high
" elseif datez#EarlyMorningColorschemeNeeded()
"   colorscheme basic-light
elseif has('termguicolors') && &termguicolors
  set bg=dark
  colorscheme hybrid
  if ! has('gvim')
    augroup transparentbackground
      au colorscheme * hi normal guibg=none ctermbg=none
    augroup end
  endif
  colorscheme hybrid
else
  colorscheme basic-dark
  if ! has('gvim')
    augroup TransparentBackground
      au ColorScheme * hi Normal guibg=NONE ctermbg=NONE
    augroup END
  endif
  colorscheme basic-dark
endif

"{{{1 Code format & Indenting
set autoindent
set nosmartindent
set nocindent
set expandtab
set shiftround
set tabstop=2
set shiftwidth=2
set softtabstop=2

set showcmd            " show typing in normal mode
set showbreak='+'
set breakindent
set breakindentopt=sbr
set textwidth=0        " disable hard wrap at col 79

set formatoptions=qn1jtc

set linebreak        " wrap lines at chars in &breakat'
set nowrap
set display=lastline,uhex

set history=1000

"{{{1 Interaction (Keys, Mouse).

set backspace=2           " =2: full backspacing capabilities (indent,eol,start)
set nojoinspaces          " never joing lines with two spaces

set mouse=a
"set mouse=                " nvim can still wheel school like this
" set mouse=nvch
"set mousehide             " [default:on]Hide the mouse when typing text
set nostartofline           " [default:on] move cursor to first non blank of a line

set whichwrap=b,s,h,l,<,> " <BS> <Space> h l <Left> <Right> can change lines
set virtualedit+=block    " Let cursor move past the last char in <C-v> mode
"set scrolloff=3          " Keep 3 context lines above and below the cursor

set matchpairs=(:),{:},[:],<:>
set noshowmatch           " Don't Briefly jump to a paren once it's balanced
" set matchtime=2           " (for only .2 seconds).
let g:loaded_matchparen = 1

if has("autocmd")
  augroup vimrc
    " Resize splits with window
    au VimResized * :wincmd =

    " Restore cursor position
    au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
  augroup END

  " augroup reload_vimrc
  "   au!
  "   autocmd bufwritepost $MYVIMRC nested source $MYVIMRC
  " augroup END
endif

set tags=./tags,tags,.tags

"{{2 netrw the underappreciated secret weapon
let g:netrw_banner = 0
let g:netrw_browse_split = 4 " vsplit
let g:netrw_winsize = 20
let g:netrw_liststyle = 3

"{{{2 Key map/sequence timeout
set timeoutlen=900
set ttimeoutlen=0

"{{{1 Visuals
"{{{2 Statuslines
set ruler
set laststatus=2
set showmode           " hide secondary statusline
set shortmess=aoOstTAI " shorten all messages except written
set report=0           " Always report the number of lines changed by a cmd

set title              " show title in console title bar
set noerrorbells
set visualbell t_vb=
" set lazyredraw
set nonumber

set splitright
set splitbelow

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

function! s:Status()
  let mod = "%{&modified ? '[+] ' : !&modifiable ? '[x] ' : ''}"
  let ro  = "%{&readonly ? '[RO] ' : ''}"
  let ft  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
  let fug = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
  let sep = ' %= '
  let pos = ' %-12(%l : %c%V%) '
  let pct = ' %P'
  return '[%n] %f %<'.mod.ro.ft.fug.sep.pos.'%*'.pct
endfunction
let &statusline = s:Status()

"{{{2 Cursor Column
set cursorline
set nocursorcolumn
" augroup activecursor
  " autocmd!
  " autocmd winenter * set cursorline
  " autocmd winleave * set nocursorline
  " autocmd winenter * set cursorcolumn   | set cursorline
  " autocmd winleave * set nocursorcolumn | set nocursorline
" augroup end

"{{{2 Incrementing
set nrformats=octal,hex

"{{{2 Completion
set complete=.,w,b,u,t
set complete-=i
set completeopt=longest,menu,preview

"{{{2 Wildmenu
if has('wildmenu')
 " enhanced tab-completion shows all matching cmds in a popup menu
 set wildmenu
 set wildmode=full
 set wildcharm=<C-z>

 if has('wildignore')
   set wildignore+=*.a,*.o,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,.DS_Store,.git,.hg,.svn,*~,*.swp,*.tmp
 endif

  if exists('&wildignorecase')
    set wildignorecase
  endif
endif
"
"{{{2 Listchars: show spaces, tab, eol trailing
set nolist
set listchars=trail:·,precedes:…,extends:→,tab:▸\ ,eol:$
set fillchars=fold:\ ,diff:╳,vert:│

"{{{2 Folding
fu! CustomFoldText()
  " I am from http://www.gregsexton.org/2011/03/improving-the-text-displayed-in-a-fold/

  "get first non-blank line
  let fs = v:foldstart
  while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " " . foldSize . " lines "
  let foldLevelStr = repeat("+--", v:foldlevel)
  let lineCount = line("$")
  let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
  let expansionString = repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
  return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endf
set foldtext=CustomFoldText()
set foldmethod=marker
set foldlevelstart=99
set foldminlines=1

"{{{2 Searching
set incsearch  " increment search
set ignorecase " case-insensitive search
set smartcase  " uppercase causes case-sensitive search
set nogdefault " Disabled - See http://j.mp/1mZvnrt  (no `g` on `:s`)

"{{{1 Filetype Autocommands
if has("autocmd")
  " TODO: put this in ftplugin (aaha, as if, im so lazy)
  au FileType helpfile                 setlocal nonumber
  au FileType mail,tex                 setlocal textwidth=72
  au FileType cpp,c,java,sh,pl,php,asp setlocal autoindent cindent
  au FileType c,cpp,java               setlocal foldmethod=syntax foldnestmax=5
  au filetype es6,javascript           setlocal foldmethod=syntax
  au filetype crontab                  setlocal nobackup nowritebackup
  au filetype markdown,journal         setlocal sts=2 ts=2 sw=2 et tw=80
  au BufNewFile,BufRead  modprobe.conf setlocal syntax=modconf
  au BufNewFile,BufRead .tern-project  set ft=json
  au BufNewFile,BufRead .eslintrc set  ft=json
endif

"{{{1 Keybindings.
"{{{2 Basic functionality extension
augroup basic-sanity-maps
    autocmd VimEnter *  vnoremap > >gv
    autocmd VimEnter *  vnoremap < <gv
    autocmd VimEnter *  nnoremap gb :bn<CR>
    autocmd VimEnter *  nnoremap gB :bp<CR>
    autocmd VimEnter *  nnoremap ]b :bn<CR>
    autocmd VimEnter *  nnoremap [b :bp<CR>
    autocmd VimEnter *  nnoremap ]t :tabn<CR>
    autocmd VimEnter *  nnoremap [t :tabp<CR>
    autocmd VimEnter *  nnoremap Y y$
    " autocmd VimEnter *  nnoremap Q gqq
    " autocmd VimEnter *  xnoremap Q gqq
    autocmd VimEnter *  noremap  <silent> <Leader><Leader> :nohls<cr><c-l>
  augroup END

if has('nvim')
  " Hey neovim authors, this isn't emacs.
  " oenvaqnzntr rireljurer
  tnoremap <ESC> <C-\><C-n>
endif

" Center the cursor a lot
augroup center-cursor-ux-maps
  autocmd VimEnter *  nnoremap <silent> <C-]> <C-]>zz
  autocmd VimEnter *  nnoremap <silent> *     *zz
  autocmd VimEnter *  nnoremap <silent> #     #zz
  autocmd VimEnter *  nnoremap <silent> g*    g*zz
  autocmd VimEnter *  nnoremap <silent> g#    g#zz
  autocmd VimEnter *  nnoremap <silent> gd    gdzz
  autocmd VimEnter *  nnoremap <silent> n     nzz
  autocmd VimEnter *  nnoremap <silent> N     Nzz
augroup END


augroup pain-mode-maps
  " K should behave like J, rip
  autocmd VimEnter *  nnoremap K :echomsg "stop using this, it hurts you when you're not home"<CR>

  autocmd VimEnter *  nnoremap <buffer> <Left>  <Nop>
  autocmd VimEnter *  nnoremap <buffer> <Right> <Nop>
  autocmd VimEnter *  nnoremap <buffer> <Up>    <Nop>
  autocmd VimEnter *  nnoremap <buffer> <Down>  <Nop>

  autocmd VimEnter *  inoremap <buffer> <Left>  <Esc>
  autocmd VimEnter *  inoremap <buffer> <Right> <Esc>
  autocmd VimEnter *  inoremap <buffer> <Up>    <Esc>
  autocmd VimEnter *  inoremap <buffer> <Down>  <Esc>

  autocmd VimEnter *  vnoremap <buffer> <Left>  <Nop>
  autocmd VimEnter *  vnoremap <buffer> <Right> <Nop>
  autocmd VimEnter *  vnoremap <buffer> <Up>    <Nop>
  autocmd VimEnter *  vnoremap <buffer> <Down>  <Nop>
augroup END

"{{{2 splits, tmux aware.
augroup tmux-splits-maps
  " pieced together from:
  " https://github.com/christoomey/vim-tmux-navigator
  " http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits
  autocmd VimEnter *  nmap <silent> <C-h> :call tmux#switch('h')<cr>
  autocmd VimEnter *  nmap <silent> <C-j> :call tmux#switch('j')<cr>
  autocmd VimEnter *  nmap <silent> <C-k> :call tmux#switch('k')<cr>
  autocmd VimEnter *  nmap <silent> <C-l> :call tmux#switch('l')<cr>

  " insert mode <C-k> inserts digraphs etc
  inoremap <C-k> <C-k>
augroup END

"}}}
"{{{2 Timestamps, datestamps
augroup datez-maps
  autocmd VimEnter *  noremap <silent> <leader>zh  m'a<C-R>=datez#UniversalTime()<CR><ESC>o<ESC>80i=<ESC>
  autocmd VimEnter *  noremap <silent> <leader>zld m'a<C-R>=datez#Local()<CR><ESC>
  autocmd VimEnter *  noremap <silent> <leader>zlt m'a<C-R>=datez#LocalTime()<CR><ESC>
  autocmd VimEnter *  noremap <silent> <Leader>zln m'a<C-R>=datez#LocalTimeNato()<CR><ESC>
  autocmd VimEnter *  noremap <silent> <Leader>zt  m'a<C-R>=datez#UniversalTime()<CR><ESC>
  autocmd VimEnter *  noremap <silent> <Leader>zd  m'a<C-R>=datez#Universal()<CR><ESC>
augroup END

" Timestamped signatures
augroup sig-maps
    autocmd VimEnter *  nmap <silent> <Leader>zy i<C-R>='[ypcrts // ' . datez#UniversalTime() . ']'<CR><ESC>
    autocmd VimEnter *  nmap <silent> <Leader>zz i<C-R>='['.expand("$USER").' // ' . datez#UniversalTime(). ']'<CR><ESC>
augroup END

"{{{2 Leader
augroup leader-maps
  autocmd VimEnter *  nnoremap <Leader>v :Vexplore<CR>

  " TODO: put this in tmux instead/also
  " XXX: if ur gonna keep it here it should use input mode
  autocmd VimEnter *  nnoremap <silent> <Leader>ip "=substitute(system("ifip tun0"),'[\r\n]','','g')<C-M>p

  autocmd VimEnter *  nnoremap <Leader>on  :setlocal number!<CR>
  autocmd VimEnter *  nnoremap <Leader>or  :setlocal relativenumber!<CR>
  autocmd VimEnter *  nnoremap <Leader>os  :setlocal spell!<CR>
  autocmd VimEnter *  nnoremap <Leader>op  :setlocal paste!<CR>:setlocal paste?<CR>
  autocmd VimEnter *  nnoremap <Leader>ow  :setlocal wrap!<CR>
  autocmd VimEnter *  nnoremap <Leader>ol  :setlocal list!<CR>
  autocmd VimEnter *  nnoremap <Leader>om  :setlocal modifiable!<CR>
  autocmd VimEnter *  nnoremap <Leader>occ :setlocal cursorcolumn!<CR>
  autocmd VimEnter *  nnoremap <Leader>ocl :setlocal cursorline!<CR>
  autocmd VimEnter *  nnoremap <Leader>ocb :call daclipz#ToggleClipboardUnnamedPlus()<CR>

  autocmd VimEnter *  nnoremap <Leader>rc :execute ":tabnew" rcz#VimFileRealpath("vimrc")<CR>
  autocmd VimEnter *  nnoremap <Leader>rp :execute ":tabnew" rcz#VimFileRealpath("plugins.vimrc")<CR>
  autocmd VimEnter *  nnoremap <Leader>rl :execute ":tabnew" rcz#VimfilesDir() . 'local.vimrc'<CR>

  autocmd VimEnter *  nnoremap ]q :cnext<CR>
  autocmd VimEnter *  nnoremap [q :cprevious<CR>
  autocmd VimEnter *  nnoremap ]Q :cnfile<CR>
  autocmd VimEnter *  nnoremap [Q :cpfile<CR>

  autocmd VimEnter *  nnoremap ]l :lnext<CR>
  autocmd VimEnter *  nnoremap [l :lprevious<CR>
  autocmd VimEnter *  nnoremap ]L :lnfile<CR>
  autocmd VimEnter *  nnoremap [L :lpfile<CR>

  " black hole register
  autocmd VimEnter *  nmap <Leader>b "_
  autocmd VimEnter *  xmap <Leader>b "_

  autocmd VimEnter *  nnoremap <leader>dgr :diffget REMOTE<CR>
  autocmd VimEnter *  nnoremap <leader>dgb :diffget BASE<CR>
  autocmd VimEnter *  nnoremap <leader>dgl :diffget LOCAL<CR>
  autocmd VimEnter *  nnoremap dgr :diffget REMOTE<CR>
  autocmd VimEnter *  nnoremap dgb :diffget BASE<CR>
  autocmd VimEnter *  nnoremap dgl :diffget LOCAL<CR>

  autocmd VimEnter *  nnoremap <leader>8 :%!python  -m autopep8 -a -a -a -<CR>
  autocmd VimEnter *  vnoremap <leader>8 :!python   -m autopep8 -a -a -a -<CR>

  autocmd VimEnter *  nnoremap <Leader>ml  :call modelinestub#do()<CR>
  autocmd VimEnter *  nnoremap <Leader>dts :call formatz#DeleteTrailingSpaces()<CR>

  autocmd VimEnter *  nnoremap <silent> <F8> :call colorz#Rotate()<cr>
augroup END

command! Todo call rcz#Todo()

" }}}1
"{{{1  Local config overrides
let s:localvimrc = s:vimfilesdir . '/local.vimrc'
if filereadable(s:localvimrc)
  execute('source' . s:localvimrc)
endif
