" vi: sw=2:sts=2:ts=2:et:fdm=marker:fdl=0:nomodeline:
"{{{1 Meta
set nocompatible
" set shortmess=aoOstTAI " shorten all messages except written
set report=0           " Always report the number of lines changed by a cmd

let mapleader = "\<Space>"

let s:is_windows = has('win32') || has('win64')
let s:is_darwin = has('mac')
let s:is_nvim = has('nvim')
let s:is_vim800 = v:version >= 800

let s:tildevimdir = s:is_windows ? '~/vimfiles' : '~/.vim'
let s:vimdir = fnameescape(expand(s:tildevimdir))
exe 'set' 'rtp=' . s:tildevimdir . '/,'. fnameescape($VIMRUNTIME)

if s:is_nvim && s:is_windows
  " XXX: python may be python2, because yes life still requires py2 post EOL
  " XXX: `python3` will be the Windows Store shortcut, so try py.exe
  let g:python3_host_prog = system('powershell "command py | select-object -expandproperty source"')
  let g:python3_host_prog = substitute(g:python3_host_prog, '[\r\n]\+', '', '')
endif

"{{{2 Plugins
if ($USER == 'root' || $USER == 'admin' || $USER == 'adm')
    \ && empty($NOSAFEVI) || !empty($SAFEVI)
  echomsg '[SAFEVI] enabled' . (empty($SAFEVI) ? ', welcome ' . $USER : ' manually')
  let s:safevi = 1
else
  if !empty($NOSAFEVI)
    echoerr '[SAFEVI] disabled as ' . $USER
    exit
  endif
  exe 'source' s:vimdir . '/plugins.vimrc'
endif


"{{{1 Standard Base Configuration (syntax, utf8, ft, clipboard, 256 )
"
"{{{2 Clear Autocommands
autocmd!
"
"{{{2 Danger: Magic File I/O
set nobackup
set writebackup
set noswapfile
set noautowrite
set autowriteall
set noautoread

"{{{2 Syntax highlighting, filetype plugin, indent
filetype plugin indent on
syntax on
syntax sync minlines=256
set synmaxcol=4096
let &spellfile = s:vimdir . '/spell/en.utf-8.add' " defaults to rtp[0] -_-

"{{{2 File encoding
if has('multi_byte')
  set encoding=utf-8 " UTF-8 encoding for all new files
  set nobomb
endif
set ffs=unix,dos,mac " Try recognizing dos, unix, and mac line endings.

"{{{2 Neovim-obseleted options
if ! s:is_nvim
  set ttyfast               " More redrawing characters sent to terminal
  set ttymouse=xterm2       " More accurate mouse tracking
endif

"{{{1 4-bit, 8-bit and 24-bit color support
if &t_Co > 2 || has('gui_running')
  set hlsearch
endif

if has('termguicolors') && !s:is_windows
  " vim8 has termguicolors too
  if s:is_nvim && (
        \    match($TERM, '^\v(screen|rxvt)-256.*$') == 0
        \   || !empty($ITERM_SESSION_ID)
        \   || !empty($ALACRITTY_LOG)
        \ )
    " This nonsense can only be set if terminal has 24 bit colour support.
    " neovim does not intuit such a thing. programming is math not magic.
    " rxvt never has 24-bit support, so off.

    set termguicolors

    " STILL BROKEN IN VIM800/TMUX2.6 - github issues galore
    " XXX: When unbroken should remove has('nvim') from conditional

    " " vim8, tmux-2.5, iterm3: b&w so force it off
    " if v:version >= 800
    "   " see `:help term.txt`
    "   let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
    "   let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
    " endif
  else
    set notermguicolors
  endif
endif


"{{{1 undo & cache
set undolevels=2048
let s:cachedir='/tmp/vim-cache' . $USER
if has('win32')
  let s:cachedir=s:vimdir . '/cache'
endif
let s:undocachedir=s:cachedir . '/undo'
if !isdirectory(s:undocachedir)
  call mkdir(s:undocachedir, 'p', 0700)
endif
if isdirectory(s:undocachedir)
  let g:netrw_home=s:cachedir
  let &directory=s:cachedir . '/swaps'
  if has('persistent_undo')
    set undofile
    let &undodir=s:undocachedir
  endif
endif

"{{{1 disable viminfo/ShaDa files
" if has('nvim') "
"   set shada="NONE"
" else
"   set viminfo="NONE"
" endif

if (s:is_windows && !s:is_nvim && v:version < 700 ) || exists('s:safevi')
 colorscheme ir_black
" elseif has('termguicolors') && &termguicolors
"   set background=dark
"   let g:solarized_termtrans = 1
"   color solarized8_dark_high
elseif datez#EarlyMorningColorschemeNeeded()
  colorscheme basic-light
elseif has('termguicolors') && &termguicolors
  colorscheme hybrid
  if ! has('gvim')
    augroup transparentbackground
      au colorscheme * hi normal guibg=none ctermbg=none
    augroup end
  endif
  colorscheme hybrid
else
  colorscheme basic-dark
  if ! has('gvim')
    augroup TransparentBackground
      au ColorScheme * hi Normal guibg=NONE ctermbg=NONE
    augroup END
  endif
  colorscheme basic-dark
endif

"{{{1 Code format & Indenting
set autoindent
set nosmartindent
set nocindent
set expandtab
set shiftround
set tabstop=2
set shiftwidth=2
set softtabstop=2

set showcmd      " show typing in normal mode
set showbreak=…\ \ \ " show x in front of wrapped lines (trailing escaped space `\ `)
set textwidth=0  " disable hard wrap at col 79

set formatoptions=qn1jtc

set linebreak        " wrap lines at chars in &breakat'
set nowrap
set display=lastline,uhex

set history=1000

"{{{1 Interaction (Keys, Mouse).

set backspace=2           " =2: full backspacing capabilities (indent,eol,start)
set nojoinspaces          " never joing lines with two spaces

set mouse=a
"set mouse=                " nvim can still wheel school like this
" set mouse=nvch            " set mouse=nv " enable mouse in normal, visual
set mousehide             " Hide the mouse when typing text
set nostartofline         " Avoid moving cursor to BOL when jumping around

set whichwrap=b,s,h,l,<,> " <BS> <Space> h l <Left> <Right> can change lines
set virtualedit+=block    " Let cursor move past the last char in <C-v> mode
"set scrolloff=3           " Keep 3 context lines above and below the cursor

set matchpairs=(:),{:},[:],<:>
set noshowmatch           " Don't Briefly jump to a paren once it's balanced
set matchtime=2           " (for only .2 seconds).

set complete=.,w,b,u,t
set completeopt=longest,menuone ",preview

if has("autocmd")
  " Resize splits with window
  au VimResized * :wincmd =

  " Restore cursor position
  au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

  augroup reload_vimrc
    au!
    autocmd bufwritepost $MYVIMRC nested source $MYVIMRC
  augroup END
endif

set tags=./tags,tags,.tags

"{{2 netrw the underappreciated secret weapon
let g:netrw_banner = 0
let g:netrw_browse_split = 4 " vsplit
let g:netrw_winsize = 20
let g:netrw_liststyle = 3

"{{{2 Key map/sequence timeout
set timeoutlen=900
set ttimeoutlen=0

"{{{1 Visuals
"{{{2 Statuslines
set ruler
set laststatus=2
set showmode           " hide secondary statusline
set shortmess=aoOstTAI " shorten all messages except written
set report=0           " Always report the number of lines changed by a cmd

set title              " show title in console title bar
set noerrorbells
set visualbell t_vb=
" set lazyredraw
set nonumber

set splitright
set splitbelow

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

"{{{2 Cursor Column
set cursorline
set nocursorcolumn
" augroup activecursor
  " autocmd!
  " autocmd winenter * set cursorline
  " autocmd winleave * set nocursorline
  " autocmd winenter * set cursorcolumn   | set cursorline
  " autocmd winleave * set nocursorcolumn | set nocursorline
" augroup end

"{{{2 Wildmenu
if has('wildmenu')
 " enhanced tab-completion shows all matching cmds in a popup menu
 set wildmenu
 set wildmode=full
 set wildcharm=<C-z>

 if has('wildignore')
   set wildignore+=*.a,*.o,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,.DS_Store,.git,.hg,.svn,*~,*.swp,*.tmp
 endif

  if exists('&wildignorecase')
    set wildignorecase
  endif
endif
"
"{{{2 Listchars: show spaces, tab, eol trailing
set nolist
set listchars=trail:·,precedes:…,extends:→,tab:▸\ ,eol:$
set fillchars=fold:\ ,diff:╳,vert:│

"{{{2 Folding
fu! CustomFoldText()
  " I am from http://www.gregsexton.org/2011/03/improving-the-text-displayed-in-a-fold/

  "get first non-blank line
  let fs = v:foldstart
  while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " " . foldSize . " lines "
  let foldLevelStr = repeat("+--", v:foldlevel)
  let lineCount = line("$")
  let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
  let expansionString = repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
  return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endf
set foldtext=CustomFoldText()
set foldmethod=marker
set foldlevelstart=99
set foldminlines=1

"{{{2 Searching
set incsearch  " increment search
set ignorecase " case-insensitive search
set smartcase  " uppercase causes case-sensitive search
set nogdefault " Disabled - See http://j.mp/1mZvnrt  (no `g` on `:s`)

"{{{1 Filetype Autocommands
if has("autocmd")
  " TODO: put this in ftplugin (aaha, as if, im so lazy)
  au FileType helpfile setlocal nonumber
  au FileType mail,tex setlocal textwidth=72
  au FileType cpp,c,java,sh,pl,php,asp setlocal autoindent cindent
  au FileType c,cpp,java setlocal foldmethod=syntax foldnestmax=5
  au FileType es6,javascript setlocal foldmethod=syntax
  au FileType crontab set nobackup nowritebackup
  au FileType markdown set sts=4 ts=4 sw=4 noet tw=80
  au BufNewFile,BufRead  modprobe.conf setlocal syntax=modconf
  au BufNewFile,BufRead .tern-project set ft=json
  au BufNewFile,BufRead .eslintrc set ft=json
endif

"{{{1 Keybindings.
"{{{2 Basic functionality extension
vnoremap > >gv
vnoremap < <gv
nnoremap gls :ls<CR>
nnoremap gb :bn<CR>
nnoremap gB :bp<CR>
nnoremap Y y$

if has('nvim')
  " Hey neovim authors, this isn't emacs.
  " oenvaqnzntr rireljurer
  tnoremap <ESC> <C-\><C-n>
endif

" Center the cursor a lot
nnoremap <silent> <C-]> <C-]>zz
nnoremap <silent> *     *zz
nnoremap <silent> #     #zz
nnoremap <silent> g*    g*zz
nnoremap <silent> g#    g#zz
nnoremap <silent> gd    gdzz
nnoremap <silent> n     nzz
nnoremap <silent> N     Nzz

" Q formats paragraphs, instead of entering ex mode
noremap Q gq
nnoremap <silent> gqJ :call Exe#ExeWithOpts('norm! gqj', { 'tw' : 2147483647 })<CR>

" K should behave like J, rip
nnoremap K :echomsg "stop using this, it hurts you when you're not home"<CR>

nnoremap <buffer> <Left>  <Nop>
nnoremap <buffer> <Right> <Nop>
nnoremap <buffer> <Up>    <Nop>
nnoremap <buffer> <Down>  <Nop>

inoremap <buffer> <Left>  <Esc>
inoremap <buffer> <Right> <Esc>
inoremap <buffer> <Up>    <Esc>
inoremap <buffer> <Down>  <Esc>

vnoremap <buffer> <Left>  <Nop>
vnoremap <buffer> <Right> <Nop>
vnoremap <buffer> <Up>    <Nop>
vnoremap <buffer> <Down>  <Nop>

"{{{2 splits, tmux aware.
" pieced together from:
" https://github.com/christoomey/vim-tmux-navigator
" http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits
nmap <silent> <C-h> :call tmux#switch('h')<cr>
nmap <silent> <C-j> :call tmux#switch('j')<cr>
nmap <silent> <C-k> :call tmux#switch('k')<cr>
nmap <silent> <C-l> :call tmux#switch('l')<cr>

nmap <C-\>  :call tmux#previous()<cr>
" nnoremap <C-w>\\ call tmux#previous()<cr>


" insert mode <C-k> inserts digraphs etc
inoremap <C-k> <C-k>

"}}}
"{{{2 Timestamps, datestamps
noremap <silent> <leader>zld m'a<C-R>=datez#Local()<CR><ESC>
noremap <silent> <leader>zlt m'a<C-R>=datez#LocalTime()<CR><ESC>
noremap <silent> <Leader>zt m'a<C-R>=datez#UniversalTime()<CR><ESC>
noremap <silent> <Leader>zd m'a<C-R>=datez#Universal()<CR><ESC>

" Timestamped signatures
nmap <silent> <leader>zg i<C-R>='[ypcrts // ' . datez#UniversalTime() . ']'<CR><ESC>
nmap <silent> <Leader>zz i<C-R>='['.expand("$USER").' // ' . datez#UniversalTime(). ']'<CR><ESC>

"{{{2 Leader
nnoremap <Leader>v :Vexplore<CR>

" TODO: put this in tmux instead/also
" XXX: if ur gonna keep it here it should use input mode
nnoremap <silent> <Leader>ip "=substitute(system("ifip tun0"),'[\r\n]','','g')<C-M>p

nnoremap <Leader>on  :setlocal number!<CR>
nnoremap <Leader>or  :setlocal relativenumber!<CR>
nnoremap <Leader>os  :setlocal spell!<CR>
nnoremap <Leader>op  :setlocal paste!<CR>
nnoremap <Leader>ow  :setlocal wrap!<CR>
nnoremap <Leader>ol  :setlocal list!<CR>
nnoremap <Leader>om  :setlocal modifiable!<CR>
nnoremap <Leader>occ :setlocal cursorcolumn!<CR>
nnoremap <Leader>ocl :setlocal cursorline!<CR>
nnoremap <Leader>ocb :call daclipz#ToggleClipboardUnnamedPlus()<CR>

nnoremap <Leader>rc :tabnew $MYVIMRC<CR>
nnoremap <Leader>rp :execute ":tabnew"  s:vimdir . "/plugins.vimrc"<CR>
nnoremap <Leader>rl :execute ":tabnew"  s:vimdir . "/local.vimrc"<CR>

nnoremap ]q :cnext<CR>
nnoremap [q :cprevious<CR>
nnoremap ]Q :cnfile<CR>
nnoremap [Q :cpfile<CR>

nnoremap ]l :lnext<CR>
nnoremap [l :lprevious<CR>
nnoremap ]L :lnfile<CR>
nnoremap [L :lpfile<CR>

" visual <Leader>d to black hole register
nmap <silent> <Leader>dd "_dd
vmap <silent> <Leader>d  "_d

nnoremap <leader>dgr :diffget REMOTE<CR>
nnoremap <leader>dgb :diffget BASE<CR>
nnoremap <leader>dgl :diffget LOCAL<CR>
nnoremap dgr :diffget REMOTE<CR>
nnoremap dgb :diffget BASE<CR>
nnoremap dgl :diffget LOCAL<CR>

nnoremap <leader>8 :%!python  -m autopep8 -a -a -a -<CR>
vnoremap <leader>8 :!python   -m autopep8 -a -a -a -<CR>

nmap     <silent>  <leader>cp :Pydocstring<CR>

noremap  <silent> <Leader><Leader> :nohls<cr><c-l>

nnoremap <Leader>ml  :call modelinestub#do()<CR>
nnoremap <Leader>dts :call formatz#DeleteTrailingSpaces()<CR>

" }}}1

"{{{1  Local config overrides
let s:localvimrc = s:vimdir . "/local.vim"
if filereadable(s:localvimrc)
  exe 'source' s:localvimrc
endif
unlet s:localvimrc
