indent_with_tabs              = 0		# 1=indent to level only, 2=indent with tabs
input_tab_size                = 2		# original tab size
output_tab_size               = 2		# new tab size
indent_columns                = output_tab_size
indent_label                  = 2		# pos: absolute col, neg: relative column
indent_align_string           = False		# align broken strings
indent_brace                  = 0
indent_switch_case            = output_tab-size

nl_enum_brace                 = remove	# "enum {" vs "enum \n {"
nl_union_brace                = remove	# "union {" vs "union \n {"
nl_struct_brace               = remove	# "struct {" vs "struct \n {"
nl_do_brace                   = remove	# "do {" vs "do \n {"
nl_if_brace                   = remove	# "if () {" vs "if () \n {"
nl_for_brace                  = remove	# "for () {" vs "for () \n {"
nl_else_brace                 = remove	# "else {" vs "else \n {"
nl_while_brace                = remove	# "while () {" vs "while () \n {"
nl_switch_brace               = remove	# "switch () {" vs "switch () \n {"
# nl_func_var_def_blk         = 1
# nl_before_case              = 1
nl_fcall_brace                = add		# "foo() {" vs "foo()\n{"
nl_fdef_brace                 = add		# "int foo() {" vs "int foo()\n{"
# nl_after_return             = TRUE
nl_brace_while                = remove
nl_brace_else                 = force
nl_squeeze_ifdef              = TRUE

mod_paren_on_return           = remove		# "return 1;" vs "return (1);"
mod_full_brace_if             = add		# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_for            = add		# "for () a--;" vs "for () { a--; }"
mod_full_brace_do             = add		# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while          = add		# "while (a) a--;" vs "while (a) { a--; }"

sp_before_semi                = remove
sp_paren_paren                = force	# space between (( and ))
sp_return_paren               = force	# "return (1);" vs "return(1);"
sp_sizeof_paren               = force	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen              = force		# "if (" vs "if("
sp_after_sparen               = force		# "if () {" vs "if (){"
sp_after_cast                 = force	# "(int) a" vs "(int)a"
sp_inside_braces              = force		# "{ 1 }" vs "{1}"
sp_inside_braces_struct       = force		# "{ 1 }" vs "{1}"
sp_inside_braces_enum         = force		# "{ 1 }" vs "{1}"
sp_inside_paren               = remove	# "( 1 )" vs "(1)"
sp_inside_fparen              = remove        # "( 1 )" vs "(1)" - functions
sp_inside_sparen              = remove        # "( 1 )" vs "(1)" - if/for/etc
# sp_type_func                = ignore
sp_assign                     = force
sp_arith                      = force
sp_bool                       = force
sp_compare                    = force
sp_after_comma                = force
sp_func_def_paren             = remove	# "int foo (){" vs "int foo(){"
sp_func_proto_paren           = remove	# "int foo ();" vs "int foo();"
sp_func_call_paren            = remove	# "foo (" vs "foo("


code_width                    = 80
ls_for_split_full             = true
ls_func_split_full            = true
ls_code_width                 = true

cmt_width                     = code_width
cmt_covert_tabs_to_spaces     = true
cmt_star_cont                 = true
cmt_cpp_group = true
cmt_cpp_to_c = true
cmt_c_group = true

eat_blanks_before_close_brace = TRUE
eat_blanks_after_open_brace   = TRUE

